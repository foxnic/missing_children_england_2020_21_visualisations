# -*- coding: utf-8 -*-
"""Missing_Children_England_2020_2021_VISUALISATIONS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mHPkzI6LY1CP1XeXzxY0E6vrgJ-rCZGS

# Missing Children England 2020 to 2021 - Visualisations

This uses data produced by the colab file 'Missing_Children_England_2020_2021_DATA_PREP':

- all_force_data.csv
- childrens_homes_mapped_to_forces.csv

## Import Code Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
# import
import numpy as np  # for working with numbers
import pandas as pd  # for importing, transforming and saving data
from datetime import datetime # Current date time in local system
import matplotlib.pyplot as plt
import seaborn as sns

# config
# %matplotlib inline
sns.set();
sns.set_style("whitegrid", {'axes.edgecolor':'gray'})
plot_colour = "#154c79"

# view versions imported
print('numpy', np.__version__)
print('pandas', pd.__version__)
print('seaborn', sns.__version__)

# view version of python used
!python --version

"""## Import Data

### Missing children
"""

missing = pd.read_csv('all_force_data.csv')

# view some summary stats and the first 2 rows of the data
print("Number of rows and columns: ", missing.shape)
print("")
print("Columns", missing.columns)
print("First few rows:")
print("")
missing.head(5)

missing

"""### Children's homes"""

homes = pd.read_csv('childrens_homes_mapped_to_forces.csv')

# view some summary stats and the first 2 rows of the data
print("Number of rows and columns: ", homes.shape)
print("")
print("First few rows:")
print("")
homes.head(5)

homes['police_force'].unique()

# change 'Devon & Cornwall' to 'Devon and Cornwall' 
# and 'Metropolitan Police' to 'Metropolitan' so name matches other data
homes.loc[homes['police_force']=='Devon & Cornwall', 'police_force']='Devon and Cornwall'
homes.loc[homes['police_force']=='Metropolitan Police', 'police_force']='Metropolitan'
homes['police_force'].unique()

"""## Total for 2020 to 2021 (missing children)"""

# create column showing number of children recorded missing 2020-21 
# as a percentage of the force area population
missing['miss_chil_as_percent_pop'] = round((missing['2020_21 children'] / missing['population_incl_adults'])*100, 2)
missing.head(3)

# create a dataframe showing num children missing in 2020-21,
# the force area population,
# and the figure as a percentage of the force area's population
num_miss_chil_and_pop_prop = missing[['police_force', 
                                      '2020_21 children',
                                      'population_incl_adults', 
                                      'miss_chil_as_percent_pop']]

num_miss_chil_and_pop_prop = num_miss_chil_and_pop_prop.set_index('police_force')
num_miss_chil_and_pop_prop = num_miss_chil_and_pop_prop.sort_values(by='miss_chil_as_percent_pop', ascending=False)
num_miss_chil_and_pop_prop

# create 3 heatmaps side-by-side showing the 2020-21 missing children figures,
# force area population, and number of missing children as a % of pop.

fig, ax = plt.subplots(figsize=(12,12), dpi=360, ncols=3, sharey=True)

pc_pop_heatmap_df = num_miss_chil_and_pop_prop[['miss_chil_as_percent_pop']]
sns.heatmap(pc_pop_heatmap_df, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            annot_kws={'size':8},
            cbar=False,
            ax=ax[0])

pop_heatmap_df = num_miss_chil_and_pop_prop[['population_incl_adults']]
sns.heatmap(pop_heatmap_df, 
            annot=True, 
            fmt=".0f", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            annot_kws={'size':8},
            cbar=False,
            ax=ax[1])

num_miss_chil_heatmap_df = num_miss_chil_and_pop_prop[['2020_21 children']]
sns.heatmap(num_miss_chil_heatmap_df, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            annot_kws={'size':8},
            cbar=False,
            ax=ax[2])

ax[0].set_title('Number of Missing Children \nas % of Force Area Population')
ax[1].set_title('Force Area Population \nIncluding Adults')
ax[2].set_title('Number of Children Recorded \nMissing 2020 to 2021 England')

ax[0].set_ylabel('')
ax[1].set_ylabel('')
ax[2].set_ylabel('')

sns.despine();

plot_title = "Number of Children Recorded Missing"
plt.savefig(plot_title,
            bbox_inches = "tight");

"""## Change from previous year (missing children)"""

prev_yr_data = missing[['police_force', 
                               'num_diff_to_2019_20_children', 
                               'percent_diff_to_2019_20_children']]

prev_yr_data = prev_yr_data.sort_values(by='percent_diff_to_2019_20_children',
                                        ascending=False)

prev_yr_data

prev_yr_data_percent = prev_yr_data[['police_force', 'percent_diff_to_2019_20_children']]
prev_yr_data_num = prev_yr_data[['police_force', 'num_diff_to_2019_20_children']]

top_pc_1 = prev_yr_data_percent.iloc[0]['percent_diff_to_2019_20_children']
top_pc_2 = prev_yr_data_percent.iloc[1]['percent_diff_to_2019_20_children']
top_pc_3 = prev_yr_data_percent.iloc[2]['percent_diff_to_2019_20_children']

print(top_pc_1)
print(top_pc_2)
print(top_pc_3)

top_num_1 = prev_yr_data_num.iloc[0]['num_diff_to_2019_20_children']
top_num_2 = prev_yr_data_num.iloc[1]['num_diff_to_2019_20_children']
top_num_3 = prev_yr_data_num.iloc[2]['num_diff_to_2019_20_children']

print(top_num_1)
print(top_num_2)
print(top_num_3)

fig, ax = plt.subplots(figsize=(12,12), dpi=360, ncols=2, sharey=True)

sns.barplot(data=prev_yr_data_percent, 
            y="police_force", 
            x="percent_diff_to_2019_20_children", 
            color = plot_colour, ax=ax[0])

sns.barplot(data=prev_yr_data_num, 
            y="police_force", 
            x="num_diff_to_2019_20_children", 
            color = plot_colour, ax=ax[1])

ax[0].set_title('% change in number of \nmissing children from 2019-20')
ax[1].set_title('Change in number of \nmissing children from 2019-20')

ax[0].set_ylabel('')
ax[1].set_ylabel('')

ax[0].text(x=top_pc_1-8, y=0.2, s=str(top_pc_1)+'%', color='white', fontsize=8, horizontalalignment='center')
ax[0].text(x=top_pc_2-8, y=1.2, s=str(top_pc_2)+'%', color='white', fontsize=8, horizontalalignment='center')
ax[0].text(x=top_pc_3-8, y=2.2, s=str(top_pc_3)+'%', color='white', fontsize=8, horizontalalignment='center')


ax[1].text(x=top_num_1-65, y=0.2, s=str(top_num_1), color='white', fontsize=8, horizontalalignment='center')
ax[1].text(x=top_num_2-90, y=1.2, s=str(top_num_2), color='white', fontsize=8, horizontalalignment='center')
ax[1].text(x=top_num_3-65, y=2.2, s=str(top_num_3), color='white', fontsize=8, horizontalalignment='center')

sns.despine();


plot_title = "Change Since Previous Year"
plt.savefig(plot_title,
            bbox_inches = "tight");

"""## All previous years (missing children)"""

# heatmap of number of missing children per force per year

years = missing.iloc[:,0:7]
years = years.sort_values(by="2020_21 children", ascending=False)
years = years.set_index('police_force')

fig, ax = plt.subplots(figsize=(12,12), dpi=360)
sns.heatmap(years, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            cbar=False,
            annot_kws={'size':8})
plt.ylabel('')
plt.title('Number of Recorded Missing Children in England 2015_16 to 2020_21')

plot_title = "Recorded Missing Children in England 2015_16 to 2020_21"
plt.savefig(plot_title,
            bbox_inches = "tight");

"""## Age distribution (all missing people)"""

# heatmap of % for each age group by force
age = missing[['police_force', 
               '0-11yrs_percent', 
               '12-17yrs_percent', 
               '18-39yrs_percent', 
               '40-59yrs_percent', 
               '60+yrs_percent',
               'Unknown_age_percent']]
age = age.sort_values(by="12-17yrs_percent", ascending=False)
age = age.set_index('police_force')

fig, ax = plt.subplots(figsize=(12,12), dpi=360)
sns.heatmap(age, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            cbar=False,
            annot_kws={'size':8})
plt.ylabel('')
plt.title('Age group distribution \n (sorted by 12-17yrs group)')

plot_title = "Age group distribution"
plt.savefig(plot_title,
            bbox_inches = "tight");

"""## Children's homes context"""

# childrens home sectors
homes_sectors = pd.DataFrame(homes.groupby(['police_force', 'Sector']).size()).reset_index()
homes_sectors.columns=['police_force', 'Sector', 'num_homes']
homes_sectors = homes_sectors.pivot(index='police_force', columns='Sector', values='num_homes')
homes_sectors = homes_sectors.fillna(0)
homes_sectors['total_homes'] = homes_sectors['Health Authority'] +\
                               homes_sectors['Local Authority'] +\
                               homes_sectors['Private'] +\
                               homes_sectors['Voluntary']
homes_sectors = homes_sectors.reset_index()
homes_sectors = homes_sectors.set_index('police_force')
homes_sectors = homes_sectors.sort_values(by='total_homes', ascending=False)
homes_sectors

fig, ax = plt.subplots(figsize=(12,12), dpi=360)
sns.heatmap(homes_sectors, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            cbar=False,
            annot_kws={'size':8})
plt.ylabel('')
plt.title("Children's home sector distribution \n (sorted by total homes)")

plot_title = "Childrens home sector distribution"
plt.savefig(plot_title,
            bbox_inches = "tight");

# childrens home PLACES per force
homes_places = pd.DataFrame(homes.groupby('police_force')['Places'].sum()).reset_index()
homes_places = homes_places.sort_values(by='Places', ascending=False)

fig, ax = plt.subplots(figsize=(12,12), dpi=360)
sns.barplot(data=homes_places,
            y='police_force',
            x='Places',
            color=plot_colour)
plt.ylabel('')
plt.title("Number of children's home places")
sns.despine();

plot_title = "Number childrens home places"
plt.savefig(plot_title,
            bbox_inches = "tight");

# Number of private childrens home owners per force
homes_priv_owners = homes.loc[homes['Sector']=='Private', ['police_force',
                                                           'Organisation which owns the provider']]
homes_priv_owners = pd.DataFrame(homes_priv_owners\
                                 .groupby('police_force')\
                                 ['Organisation which owns the provider']\
                                 .size()).reset_index()
homes_priv_owners = homes_priv_owners.sort_values(by='Organisation which owns the provider',
                                                  ascending=False)
homes_priv_owners.columns=['police_force', 'num_private_providers']
homes_priv_owners

fig, ax = plt.subplots(figsize=(12,12), dpi=360)
sns.barplot(data=homes_priv_owners,
            y='police_force',
            x='num_private_providers',
            color=plot_colour)
plt.ylabel('')
plt.title("Number of private children's home providers")
sns.despine();

plot_title = "Private childrens home providers"
plt.savefig(plot_title,
            bbox_inches = "tight");

"""## Children missing from care / not care"""

care_summary = missing[['police_force',
                        'care_child_incident_ratio',
                        'not_care_child_incident_ratio',
                        'care_num_child_incidents',
                        'not_care_num_child_incidents',
                        'care_num_missing_children',
                        'not_care_num_missing_children',
                        'care_plus_not_care_child_ttl',
                        'percent_care_children']]

care_summary = care_summary.merge(homes_sectors, left_on='police_force',
                                  right_on='police_force', how='outer')

care_summary = care_summary.merge(homes_places, left_on='police_force',
                                  right_on='police_force', how='outer')

care_summary.to_csv('care_summary.csv', index=False)

care_summary.head(3)

# Heatmaps side-by-side showing:
##  - % care
##  - care ratio
##  - num homes
##  - num home places
##  - ttl children missing (care plus not care) - number
## sorted by % in care
care_summary = care_summary.sort_values(by='percent_care_children', ascending=False)
pc_care_heatmap = care_summary[['police_force', 'percent_care_children']].set_index('police_force')
care_ratio_heatmap = care_summary[['police_force', 'care_child_incident_ratio']].set_index('police_force')
ttl_homes_heatmap = care_summary[['police_force', 'total_homes']].set_index('police_force')
places_heatmap = care_summary[['police_force', 'Places']].set_index('police_force')
children_heatmap = care_summary[['police_force', 'care_plus_not_care_child_ttl']].set_index('police_force')


fig, ax = plt.subplots(figsize=(12,12), dpi=360, ncols=5, sharey=True)

sns.heatmap(pc_care_heatmap, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            cbar=False,
            annot_kws={'size':8},
            ax=ax[0])

ax[0].set_ylabel('')
ax[0].set_title('% missing children \nrecorded in care')

sns.heatmap(care_ratio_heatmap, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            cbar=False,
            annot_kws={'size':8},
            ax=ax[1])

ax[1].set_ylabel('')
ax[1].set_title('Avg incidents per \nmissing child in care')

sns.heatmap(ttl_homes_heatmap, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            cbar=False,
            annot_kws={'size':8},
            ax=ax[2])

ax[2].set_ylabel('')
ax[2].set_title('Childrens homes')

sns.heatmap(places_heatmap, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            cbar=False,
            annot_kws={'size':8},
            ax=ax[3])

ax[3].set_ylabel('')
ax[3].set_title('Childrens homes places')

sns.heatmap(children_heatmap, 
            annot=True, 
            fmt="g", 
            cmap='Blues',
            linewidths=1, 
            linecolor='grey',
            cbar=False,
            annot_kws={'size':8},
            ax=ax[4])

ax[4].set_ylabel('')
ax[4].set_title('Children missing \n(care + not care)');

plot_title = "Care Summary Heatmaps"
plt.savefig(plot_title,
            bbox_inches = "tight");