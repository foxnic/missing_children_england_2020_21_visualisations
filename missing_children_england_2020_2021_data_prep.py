# -*- coding: utf-8 -*-
"""Missing_Children_England_2020_2021_DATA_PREP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XmtgjcaonrO6Xvh7FIsToDJW83Zf2bCt

# Missing Children in England (2021-2021) - Data Preparation

**Data Sources**
- [Missing Persons Statistical Bulletins - National Crime Agency](https://missingpersons.police.uk/cy-gb/resources/downloads/missing-persons-statistical-bulletins) - 2021-21 data file
  - Table A3: Number of missing individuals recorded by UK police forces, 2015/21
  - Table B1: Number of missing related calls recorded by UK police forces in 2020/21 (contains population per force area)
  - Table C2: Age distribution of missing incidents by UK police forces, 2020/21
  - Table F1: Missing from care, 2020/21
- [Children's social care in England 2021 underlying data - Ofsted](https://www.gov.uk/government/statistics/childrens-social-care-data-in-england-2021) - Tab: "Provider level at 31 Mar 2021"
- [Local Authority District to Community Safety Partnerships to Police Force Areas (December 2016) Lookup in England and Wales - UK Government](https://www.data.gov.uk/dataset/d014d7d2-1836-468f-97b8-bb7d0b061bf7/local-authority-district-to-community-safety-partnerships-to-police-force-areas-december-2016-lookup-in-england-and-wales)




**Data Downloaded**

Tuesday 2nd August 2022


**Limitations**

- Missing data:
     - some missing persons cases may not have been reported to police
     - some reported missing persons cases may not have been recorded by police
     - the police forces in England do not all operate in the same way, as they have different systems and procedures, and therefore figures across forces may not be comparable
     - recording practices within forces change over time and may account for some differences between years in the same force
     - not all forces have provided data
     - not all forces are able to provide data by certain variables such as gender, age, ethnicity
     - data is not yet available for all types of child exploitation e.g. child sexual exploitation (CSE) is reported but not child criminal exploitation (CCE)
     - harm experienced is not always disclosed to police officers, for reasons including fear of not being believed or due to threats, by their abusers, to the child or people they care about
- LA to force mapping: changes may have occurred since 2016

## Import Code Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
# import
import numpy as np  # for working with numbers
import pandas as pd  # for importing, transforming and saving data
from datetime import datetime # Current date time in local system
import matplotlib.pyplot as plt
import seaborn as sns

# config
# %matplotlib inline
sns.set();
sns.set_style("whitegrid", {'axes.edgecolor':'gray'})
plot_colour = "#154c79"

# view versions imported
print('numpy', np.__version__)
print('pandas', pd.__version__)
print('seaborn', sns.__version__)

# view version of python used
!python --version

"""## Import Data

### Missing Children Data

#### Number of children
"""

# import csv into a pandas dataframe
missing_num_children = pd.read_csv('table_a3.csv')

# view some summary stats and the first 2 rows of the data
print("Number of rows and columns: ", missing_num_children.shape)
print("")
print("First few rows:")
print("")
missing_num_children.head(2)

"""#### Police force area population"""

# import csv into a pandas dataframe
force_pop = pd.read_csv('table_b1.csv')

# view some summary stats and the first 2 rows of the data
print("Number of rows and columns: ", force_pop.shape)
print("")
print("First few rows:")
print("")
force_pop.head(2)

"""#### Age distribution"""

# import csv into a pandas dataframe
age_dist_percent = pd.read_csv('table_c2.csv')

# view some summary stats and the first 2 rows of the data
print("Number of rows and columns: ", age_dist_percent.shape)
print("")
print("First few rows:")
print("")
age_dist_percent.head(2)

"""#### Missing from care"""

# import csv into a pandas dataframe
care = pd.read_csv('table_f1.csv')

# view some summary stats and the first 2 rows of the data
print("Number of rows and columns: ", care.shape)
print("")
print("First few rows:")
print("")
care.head(2)

"""### Children's Homes Data"""

# import csv into a pandas dataframe
homes = pd.read_csv('child_residential_care _31_mar_2021.csv')

# view some summary stats and the first 2 rows of the data
print("Number of rows and columns: ", homes.shape)
print("")
print("First few rows:")
print("")
homes.head(2)

"""### Local Authority to Police Force Area Mapping Data"""

# import csv into a pandas dataframe
areas = pd.read_csv('la_to_pf_areas.csv')

# view some summary stats and the first 2 rows of the data
print("Number of rows and columns: ", areas.shape)
print("")
print("First few rows:")
print("")
areas.head(2)

"""## Transform Data

### Remove commas, replace 'x' and '.' with null, and convert strings to floats

##### Missing Children
"""

# replace 'x' and '.' with NaN
missing_num_children = missing_num_children.replace("x", np.nan)
missing_num_children = missing_num_children.replace(".", np.nan)

# view the updated data
missing_num_children

# get all the columns containing a numerical value
years = missing_num_children.columns[1:]

# view those columns
print(years)

# for each column, remove any commas and save values as floats
for year in years:
  missing_num_children[year] = missing_num_children[year].str.replace(",", "")
  missing_num_children[year] = missing_num_children[year].astype(float)

# view the updated data
missing_num_children

"""##### Force population"""

# replace 'x' and '.' with NaN
force_pop = force_pop.replace("x", np.nan)
force_pop = force_pop.replace(".", np.nan)

# view the updated data
force_pop

# get all the columns containing a numerical value
force_pop_value_cols = force_pop.columns[1:]

# view those columns
print(force_pop_value_cols)

# for each column, remove any commas and save values as floats
for value_col in force_pop_value_cols:
  force_pop[value_col] = force_pop[value_col].str.replace(",", "")
  force_pop[value_col] = force_pop[value_col].astype(float)

# view the updated data
force_pop

"""##### Age distribution percentages"""

# replace 'x' and '.' with NaN
age_dist_percent = age_dist_percent.replace("x", np.nan)
age_dist_percent = age_dist_percent.replace(".", np.nan)

# view the updated data
age_dist_percent

# get all the columns containing a numerical value
age_dist_percent_cols = age_dist_percent.columns[1:]

# view those columns
print(age_dist_percent_cols)

# for each column, remove any commas and save values as floats
for value_col in age_dist_percent_cols:
  age_dist_percent[value_col] = age_dist_percent[value_col].str.replace(",", "")
  age_dist_percent[value_col] = age_dist_percent[value_col].astype(float)

# view the updated data
age_dist_percent

"""#### Missing from care"""

# replace 'x' and '.' with NaN
care = care.replace("x", np.nan)
care = care.replace(".", np.nan)

# view the updated data
care

# get all the columns containing a numerical value
care_cols = care.columns[1:]

# view those columns
print(care_cols)

# for each column, remove any commas and save values as floats
for value_col in care_cols:
  care[value_col] = care[value_col].str.replace(",", "")
  care[value_col] = care[value_col].astype(float)

# view the updated data
care

"""### Remove Number Suffixes from Police Force Names

##### Missing Children
"""

# loop through police force column and if force name ends in a number then remove the number and preceding space
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
for idx, row in missing_num_children.iterrows():
    idxfor_val = row['police_force']
    for number in numbers:
      if row['police_force'].endswith(str(number)):
        idxfor_val = row['police_force'][:-2]
        print(idxfor_val)
    missing_num_children.at[idx,'police_force'] = idxfor_val

# view updated data
missing_num_children

"""##### Force population"""

# loop through police force column and if force name ends in a number then remove the number and preceding space
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
for idx, row in force_pop.iterrows():
    idxfor_val = row['police_force']
    for number in numbers:
      if row['police_force'].endswith(str(number)):
        idxfor_val = row['police_force'][:-2]
        print(idxfor_val)
    force_pop.at[idx,'police_force'] = idxfor_val

# view updated data
force_pop

"""##### Age distribution percentages"""

# loop through police force column and if force name ends in a number then remove the number and preceding space
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
for idx, row in age_dist_percent.iterrows():
    idxfor_val = row['police_force']
    for number in numbers:
      if row['police_force'].endswith(str(number)):
        idxfor_val = row['police_force'][:-2]
        print(idxfor_val)
    age_dist_percent.at[idx,'police_force'] = idxfor_val

# view updated data
age_dist_percent

"""#### Missing from care"""

# loop through police force column and if force name ends in a number 
# or number followed by a comma, then remove the number and preceding space
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9]
for idx, row in care.iterrows():
    idxfor_val = row['police_force'].strip()
    for number in numbers:
      if (idxfor_val.endswith(str(number))) | (idxfor_val.endswith(' ')) | (idxfor_val.endswith(',')):
        idxfor_val = idxfor_val[:-2].strip()
        care.at[idx,'police_force'] = idxfor_val
        print('1 ', number, row['police_force'], '-->', idxfor_val)
      if (idxfor_val.endswith(str(number)+','+str(number+1))):
        idxfor_val = idxfor_val[:-3].strip()
        care.at[idx,'police_force'] = idxfor_val
        print('2 ', number, row['police_force'], '-->', idxfor_val)
      
# view updated data
care

"""### Filter Children's Homes Data"""

homes.groupby('Provision type').size()

# keep only childrens homes rows
prov_types_to_include = ["Children's Home", "Children's home"]
homes = homes.loc[homes['Provision type'].isin(prov_types_to_include)]
homes.groupby('Provision type').size()

"""### Convert home types to lower case"""

homes['Provision type'] = homes['Provision type'].str.lower()
homes.groupby('Provision type').size()

"""### Map Children's Home LA Data to Police Force"""

areas.head(3)

# strip areas data LA name of any leading/trailing white space, 
# and convert to lower case to prepare for matching
areas['CSP16NM'] = areas['CSP16NM'].str.lower()
areas['CSP16NM'] = areas['CSP16NM'].str.strip()
areas.head()

# strip homes LA name of any leading/trailing white space, 
# and convert to lower case to prepare for matching
homes['Local authority'] = homes['Local authority'].str.lower()
homes['Local authority'] = homes['Local authority'].str.strip()
homes.head()

homes_with_pf = homes.merge(areas, left_on="Local authority", right_on="CSP16NM", how="left")
homes_with_pf.head(20)

# view all homes data LA names where there wasn't a match
unmatched = homes_with_pf.loc[homes_with_pf['CSP16NM'].isna(), 'Local authority'].unique()
unmatched

# view all rows in the area mapping data where the CSP16NM name 
# contains the first word in each of the unmatched home LA names
for each in unmatched:
  print('')
  print(each)
  print(areas.loc[areas['CSP16NM'].str.contains(each), ['CSP16NM', 'PFA16NM']])

homes_with_pf['police_force'] = homes_with_pf['PFA16NM']

homes_with_pf.loc[homes_with_pf['Local authority']=='northamptonshire', 'police_force']='Northamptonshire'
homes_with_pf.loc[homes_with_pf['Local authority']=='herefordshire', 'police_force']='West Mercia'
homes_with_pf.loc[homes_with_pf['Local authority']=='warwickshire', 'police_force']='Warwickshire'
homes_with_pf.loc[homes_with_pf['Local authority']=='lancashire', 'police_force']='Lancashire'
homes_with_pf.loc[homes_with_pf['Local authority']=='devon', 'police_force']='Devon & Cornwall'
homes_with_pf.loc[homes_with_pf['Local authority']=='durham', 'police_force']='Durham'
homes_with_pf.loc[homes_with_pf['Local authority']=='derbyshire', 'police_force']='Derbyshire'
homes_with_pf.loc[homes_with_pf['Local authority']=='norfolk', 'police_force']='Norfolk'
homes_with_pf.loc[homes_with_pf['Local authority']=='nottinghamshire', 'police_force']='Nottinghamshire'
homes_with_pf.loc[homes_with_pf['Local authority']=='oxfordshire', 'police_force']='Thames Valley'
homes_with_pf.loc[homes_with_pf['Local authority']=='lincolnshire', 'police_force']='Humberside'
homes_with_pf.loc[homes_with_pf['Local authority']=='hertfordshire', 'police_force']='Hertfordshire'
homes_with_pf.loc[homes_with_pf['Local authority']=='worcestershire', 'police_force']='West Mercia'
homes_with_pf.loc[homes_with_pf['Local authority']=='surrey', 'police_force']='Surrey'
homes_with_pf.loc[homes_with_pf['Local authority']=='kingston upon hull', 'police_force']='Humberside'
homes_with_pf.loc[homes_with_pf['Local authority']=='staffordshire', 'police_force']='Staffordshire'
homes_with_pf.loc[homes_with_pf['Local authority']=='leicestershire', 'police_force']='Leicestershire'
homes_with_pf.loc[homes_with_pf['Local authority']=='bristol', 'police_force']='Avon and Somerset'
homes_with_pf.loc[homes_with_pf['Local authority']=='suffolk', 'police_force']='Suffolk'
homes_with_pf.loc[homes_with_pf['Local authority']=='cambridgeshire', 'police_force']='Cambridgeshire'
homes_with_pf.loc[homes_with_pf['Local authority']=='gloucestershire', 'police_force']='Avon and Somerset'
homes_with_pf.loc[homes_with_pf['Local authority']=='york', 'police_force']='North Yorkshire'
homes_with_pf.loc[homes_with_pf['Local authority']=='', 'police_force']=''
homes_with_pf.head(20)

homes_with_pf.loc[homes_with_pf['Local authority']=='hampshire', 'police_force']='Hampshire'
homes_with_pf.head(20)

homes_with_pf.loc[homes_with_pf['police_force'].isna(), 'Local authority'].unique()

homes_with_pf.loc[homes_with_pf['Local authority']=='cumbria', 'police_force']='Cumbria'
homes_with_pf.loc[homes_with_pf['Local authority']=='essex', 'police_force']='Essex'
homes_with_pf.loc[homes_with_pf['Local authority']=='kent', 'police_force']='Kent'
homes_with_pf.loc[homes_with_pf['Local authority']=='east sussex', 'police_force']='Sussex'
homes_with_pf.loc[homes_with_pf['Local authority']=='bournemouth, christchurch & poole', 'police_force']='Dorset'
homes_with_pf.loc[homes_with_pf['Local authority']=='west sussex', 'police_force']='Sussex'
homes_with_pf.loc[homes_with_pf['Local authority']=='st helens', 'police_force']='Merseyside'
homes_with_pf.loc[homes_with_pf['Local authority']=='buckinghamshire', 'police_force']='Thames Valley'
homes_with_pf.loc[homes_with_pf['Local authority']=='southend on sea', 'police_force']='Essex'
homes_with_pf.loc[homes_with_pf['police_force'].isna(), 'Local authority'].unique()

homes_with_pf.head(2)

homes_with_pf = homes_with_pf[['police_force', 'Local authority', 
                               'Ofsted region', 'Provision type', 'Sector', 
                               'Places', 
                               'Organisation which owns the provider']]

homes_with_pf = homes_with_pf.sort_values(by=['Ofsted region', 'police_force', 
                                              'Local authority', 
                                              'Provision type', 
                                              'Organisation which owns the provider'])

homes_with_pf.head(30)

# save homes data (with police_force column) to csv
homes_with_pf.to_csv('childrens_homes_mapped_to_forces.csv', index=False)

"""### Create all-data dataframe with one row per force"""

# check with tables contain 
# West Mercia and Warwickshire combined and 
# which contain them separately

print('')
print('***** missing_num_children:')
print('')
print(missing_num_children.loc[missing_num_children['police_force']=='West Mercia', 'police_force'])
print('')
print(missing_num_children.loc[missing_num_children['police_force']=='Warwickshire', 'police_force'])
print('')
print(missing_num_children.loc[missing_num_children['police_force']=='Warwickshire and West Mercia', 'police_force'])
print('')
print('')

print('')
print('***** force_pop:')
print('')
print(force_pop.loc[force_pop['police_force']=='West Mercia', 'police_force'])
print('')
print(force_pop.loc[force_pop['police_force']=='Warwickshire', 'police_force'])
print('')
print(force_pop.loc[force_pop['police_force']=='Warwickshire and West Mercia', 'police_force'])
print('')
print('')

print('')
print('***** age_dist_percent:')
print('')
print(age_dist_percent.loc[age_dist_percent['police_force']=='West Mercia', 'police_force'])
print('')
print(age_dist_percent.loc[age_dist_percent['police_force']=='Warwickshire', 'police_force'])
print('')
print(age_dist_percent.loc[age_dist_percent['police_force']=='Warwickshire and West Mercia', 'police_force'])
print('')
print('')


print('')
print('***** care:')
print('')
print(care.loc[care['police_force']=='West Mercia', 'police_force'])
print('')
print(care.loc[care['police_force']=='Warwickshire', 'police_force'])
print('')
print(care.loc[care['police_force']=='Warwickshire and West Mercia', 'police_force'])
print('')
print('')

# create a dataframe with one row per force to store all the stats per force
all_force_data = missing_num_children.copy()
all_force_data = all_force_data.rename(columns={'2015_16':'2015_16 children', 
                                                '2016_17':'2016_17 children',
                                                '2017_18':'2017_18 children',
                                                '2018_19':'2018_19 children',
                                                '2019_20':'2019_20 children',
                                                '2020_21':'2020_21 children',
                                                'diff_to_2019_20_number':'num_diff_to_2019_20_children',
                                                'diff_to_2019_20_percentage':'percent_diff_to_2019_20_children'})

all_force_data = all_force_data.merge(force_pop, 
                                      left_on='police_force',
                                      right_on='police_force',
                                      how='outer')
all_force_data = all_force_data.rename(columns={'population':'population_incl_adults',
                                                'calls_recorded':'all_misper_calls_recorded',
                                                'rate_per_1000':'all_misper_call_rate_per_1000'})

all_force_data = all_force_data.merge(age_dist_percent,
                                      left_on='police_force',
                                      right_on='police_force',
                                      how='left')
all_force_data = all_force_data.rename(columns={'0-11yrs':'0-11yrs_percent',
                                                '12-17yrs':'12-17yrs_percent',
                                                '18-39yrs':'18-39yrs_percent',
                                                '40-59yrs':'40-59yrs_percent',
                                                '60+yrs':'60+yrs_percent',
                                                'Unknown':'Unknown_age_percent'})

all_force_data = all_force_data.merge(care,
                                      left_on='police_force',
                                      right_on='police_force',
                                      how='left')
all_force_data = all_force_data.rename(columns={'care_incidents':'care_num_child_incidents',
                                                'care_individuals':'care_num_missing_children',
                                                'care_ratio':'care_child_incident_ratio',
                                                'not_care_incidents':'not_care_num_child_incidents',
                                                'not_care_individuals':'not_care_num_missing_children',
                                                'not_care_ratio':'not_care_child_incident_ratio'})

all_force_data['care_plus_not_care_child_ttl'] = all_force_data['care_num_missing_children'] + all_force_data['not_care_num_missing_children']
all_force_data['percent_care_children'] = round(all_force_data['care_num_missing_children'] / all_force_data['care_plus_not_care_child_ttl'] * 100,2)
all_force_data

"""**Note:** 2020-21 num children doesn't match total of care plus not care children for Avon & Somerset and other forces. Possibly 'care' label at incident level rather than child level and some incidents before or after being in care"""

# save all_force_data to csv
all_force_data.to_csv('all_force_data.csv', index=False)